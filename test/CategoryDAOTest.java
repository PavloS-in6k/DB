import DAO.*;
import Entinity.Category;
import Entinity.Order;
import Entinity.Product;
import Entinity.TaskEntity.ItemCount;
import Entinity.User;
import org.dbunit.IDatabaseTester;
import org.dbunit.JdbcDatabaseTester;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.operation.DatabaseOperation;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;

public class CategoryDAOTest {

    private static IDatabaseTester databaseTester;
    private static CategoryDAOImpl categoryDAO;
    private static Task task;
    private static OrderDAOImpl orderDAO;

    @BeforeClass
    public static void init() throws Exception {
        databaseTester = new JdbcDatabaseTester(org.hsqldb.jdbcDriver.class
                .getName(), "jdbc:hsqldb:file:~Desktop/si", "sa", "");
        createTablesSinceDbUnitDoesNot(databaseTester.getConnection().getConnection());
        String inputXml = getStringDBfromXml();
        IDataSet dataSet = new FlatXmlDataSetBuilder().build(new StringReader(inputXml));
        databaseTester.setDataSet(dataSet);
        databaseTester.setSetUpOperation(DatabaseOperation.CLEAN_INSERT);
        databaseTester.setTearDownOperation(DatabaseOperation.DELETE_ALL);
        databaseTester.onSetup();


        ProductDAOImpl productDAO = new ProductDAOImpl();
        productDAO.setConnection(databaseTester);

        categoryDAO = new CategoryDAOImpl();
        categoryDAO.setProductDAO(productDAO);
        categoryDAO.setConnection(databaseTester);

        task = new Task();
        task.setCategoryDAO(categoryDAO);
        task.setConnection(databaseTester);

        orderDAO = new OrderDAOImpl();
        orderDAO.setUserDAO(new UserDAOImpl());
        orderDAO.setConnection(databaseTester);
    }

    protected static String getStringDBfromXml() throws Exception {
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer;

        Document doc = getXml();
        transformer = tf.newTransformer();
        StringWriter writer = new StringWriter();
        transformer.transform(new DOMSource(doc), new StreamResult(writer));
        String output = writer.getBuffer().toString();

        return output;
    }

    private static Document getXml() throws ParserConfigurationException, SAXException, IOException {
        File xmlFile = new File("test/DB.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(xmlFile);
        return doc;
    }

    private static void createTablesSinceDbUnitDoesNot(Connection connection)
            throws SQLException {
        PreparedStatement statement = connection.prepareStatement("CREATE TABLE Categories" +
                "(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CategoryName VARCHAR(255))");
        statement.execute();
        statement.close();

        statement = connection.prepareStatement("CREATE TABLE Products" +
                "(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ProductName VARCHAR(255), " +
                "Price DECIMAL, CategoryID INT, FOREIGN KEY(CategoryID) REFERENCES Categories(ID))");
        statement.execute();
        statement.close();

        statement = connection.prepareStatement("CREATE TABLE Users" +
                "(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, UserName VARCHAR(255))");
        statement.execute();
        statement.close();

        statement = connection.prepareStatement("CREATE TABLE Orders" +
                "(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TimeStamp TIMESTAMP , Price DECIMAL, " +
                "UserID INT, FOREIGN KEY(UserID) REFERENCES Users(ID))");
        statement.execute();
        statement.close();

        statement = connection.prepareStatement("CREATE TABLE OrderProducts" +
                "(OrderID INT, ProductID INT, " +
                "ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "FOREIGN KEY(OrderID) REFERENCES Orders(ID), " +
                "FOREIGN KEY(ProductID) REFERENCES Products(ID))");
        statement.execute();
        statement.close();
    }

    @Test
    public void testCategoryOrder() throws Exception {
        assertEquals(categoryDAO.getAllCategories().size(), 3);
        assertEquals(categoryDAO.getAllCategories().get(0).getProducts().size(), 2);
        assertEquals(categoryDAO.getAllCategories().get(1).getProducts().size(), 3);
        assertEquals(categoryDAO.getAllCategories().get(2).getProducts().size(), 1);
    }

    @Test
    public void isAllProductsForCategoryGivenBackCorrect() throws Exception {
        Category testSample = new Category(2, "Tablet", Arrays.asList(new Product(5, BigDecimal.valueOf(350.00), "Tabletko", 2)));
        Category gettedSample = categoryDAO.getCategory("2");

        assertEquals(gettedSample.getName(), testSample.getName());
        assertThat(gettedSample.getProducts().size(), equalTo(1));
        assertThat(gettedSample.getProducts().get(0).getName(), equalTo(testSample.getProducts().get(0).getName()));

    }

    @Test
    public void isAllCategoriesGivenBack() throws Exception {
        Category testMemoryPlank = new Category(0, "Memory Plank", Arrays.asList(
                new Product(3, BigDecimal.valueOf(9000.01), "Memory XDDR 1337GHz", 0),
                new Product(4, BigDecimal.valueOf(900.00), "Memory NOXDDR 619MHz", 0)
        ));
        Category testPowerBank = new Category(1, "Power Bank", Arrays.asList(
                new Product(0, BigDecimal.valueOf(1200.00), "MEGAPOWERBANK!!111", 1),
                new Product(1, BigDecimal.valueOf(800.00), "Usual power bank", 1),
                new Product(2, BigDecimal.valueOf(20.00), "sad power bank :(", 1)
        ));
        Category testTablets = new Category(2, "Tablet", Arrays.asList(new Product(5, BigDecimal.valueOf(350.00), "Tabletko", 2)));


        List<Category> values = categoryDAO.getAllCategories();
        //assertThat(values, hasItems(Arrays.asList(testMemoryPlank, testPowerBank, testTablets)));
    }

    @Test
    public void getOrderByID() throws Exception {
        List<Product> products = Arrays.asList(new Product(0, BigDecimal.valueOf(1200.00), "MEGAPOWERBANK!!111", 1),
                new Product(0, BigDecimal.valueOf(1200.00), "MEGAPOWERBANK!!111", 1),
                new Product(1, BigDecimal.valueOf(800.00), "Usual power bank", 1));

        Order testOrder = new Order(new User(0, "Uncle Bob"), LocalDateTime.parse("2007-07-07T12:00:00"),
                products, BigDecimal.valueOf(3200.00));

        Order order = orderDAO.getOrderByID(String.valueOf(0));

        assertEquals(order.getProducts().size(), testOrder.getProducts().size());
        assertEquals(order.getTimeStamp(), testOrder.getTimeStamp());
        // нaйти спосо6 срaвнить
        // assertEquals(order.getPrice(), testOrder.getPrice());
    }

    @Test
    public void getTop3() throws Exception {
        List<ItemCount> top3 = task.getTop3("Power Bank");
        List<ItemCount> testTop = Arrays.asList(new ItemCount("MEGAPOWERBANK!!111", 2), new ItemCount("Usual power bank", 1));

        assertEquals(top3.size(), 3);
        assertEquals(top3.get(0).getName(), "MEGAPOWERBANK!!111");
    }

    @AfterClass
    public static void cleanUp() throws Exception {
        categoryDAO = null;
        databaseTester.onTearDown();
        databaseTester = null;
    }
}